/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

bindings = <
    &kp F1       &rgb_ug_press RGB_RED      &kp F2       &rgb_ug_press RGB_GREEN   &kp F3       &rgb_ug_press RGB_BLUE    &kp F4       &rgb_ug_press RGB_YELLOW   &kp F5
    &kp EQUAL    &rgb_ug_press RGB_ORANGE   &kp N1       &rgb_ug_press RGB_PURPLE   &kp N2       &rgb_ug_press RGB_CYAN    &kp N3       &rgb_ug_press RGB_WHITE
    &kp TAB      &rgb_ug_press RGB_MAGENTA  &kp Q        &rgb_ug_press RGB_RED      &kp W        &rgb_ug_press RGB_GREEN   &kp E        &rgb_ug_press RGB_BLUE
    &kp ESC      &rgb_ug_press RGB_YELLOW   &kp A        &rgb_ug_press RGB_RED      &kp S        &rgb_ug_press RGB_GREEN   &kp D        &rgb_ug_press RGB_BLUE
    &kp F        &rgb_ug_press RGB_YELLOW   &kp G        &rgb_ug_press RGB_PURPLE   &kp H        &rgb_ug_press RGB_CYAN    &kp J        &rgb_ug_press RGB_WHITE
    &kp K        &rgb_ug_press RGB_RED      &kp L        &rgb_ug_press RGB_GREEN   &kp SEMI     &rgb_ug_press RGB_BLUE    &kp SQT      &rgb_ug_press RGB_YELLOW
    &kp GRAVE    &rgb_ug_press RGB_RED      &kp Z        &rgb_ug_press RGB_GREEN   &kp X        &rgb_ug_press RGB_BLUE    &kp C        &rgb_ug_press RGB_YELLOW
    &kp V        &rgb_ug_press RGB_PURPLE   &kp B        &rgb_ug_press RGB_CYAN    &kp LSHFT    &rgb_ug_press RGB_WHITE   &kp LCTRL    &rgb_ug_press RGB_RED
    &layer_td    &rgb_ug_press RGB_GREEN    &kp LGUI     &rgb_ug_press RGB_BLUE    &kp RCTRL    &rgb_ug_press RGB_YELLOW  &kp RSHFT    &rgb_ug_press RGB_PURPLE
    &kp N        &rgb_ug_press RGB_CYAN     &kp M        &rgb_ug_press RGB_WHITE   &kp COMMA    &rgb_ug_press RGB_RED     &kp DOT      &rgb_ug_press RGB_GREEN
    &kp FSLH     &rgb_ug_press RGB_BLUE     &kp PG_UP    &rgb_ug_press RGB_YELLOW  &mo MAGIC    &rgb_ug_press RGB_PURPLE  &kp HOME    &rgb_ug_press RGB_CYAN
    &kp END      &rgb_ug_press RGB_WHITE    &kp LEFT     &rgb_ug_press RGB_RED     &kp RIGHT    &rgb_ug_press RGB_GREEN   &kp BSPC    &rgb_ug_press RGB_BLUE
    &kp DEL      &rgb_ug_press RGB_YELLOW   &kp LALT     &rgb_ug_press RGB_PURPLE  &kp RALT     &rgb_ug_press RGB_CYAN    &kp RET     &rgb_ug_press RGB_WHITE
    &kp SPACE    &rgb_ug_press RGB_RED      &kp UP       &rgb_ug_press RGB_GREEN   &kp DOWN     &rgb_ug_press RGB_BLUE    &kp LBKT    &rgb_ug_press RGB_YELLOW
    &kp RBKT     &rgb_ug_press RGB_PURPLE   &kp PG_DN    &rgb_ug_press RGB_CYAN
>;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &none
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};
